<#
.SYNOPSIS
    AI-powered PowerShell script to analyze, extract, and generate a development environment reinstallation script.

.DESCRIPTION
    - Scans installed programs (via registry, Chocolatey, Winget).
    - Collects installed Python, NPM, and VS Code extensions.
    - Extracts critical settings, environment variables, and registry keys.
    - Logs all operations to a file for debugging and verification.
    - Generates an `install_dev_env.ps1` script to restore the environment.

.NOTES
    Author: CBW
    Version: 1.0
    Requires: PowerShell 5+, Administrator Privileges
#>

# Ensure script is running as Admin
function Ensure-Admin {
    if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Host "Error: This script requires administrative privileges!" -ForegroundColor Red
        exit 1
    }
}
Ensure-Admin

# Set up logging
$LogFile = "$HOME\Desktop\DevEnvSetup.log"
function Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$timestamp - $Message" | Out-File -Append -FilePath $LogFile
    Write-Host $Message
}

# Base class for collecting system data
class SystemDataCollector {
    [string]$outputFile

    SystemDataCollector() {
        $this.outputFile = "$HOME\Desktop\install_dev_env.ps1"
    }

    [void] WriteToFile([string]$content) {
        $content | Out-File -Append -Encoding utf8 -FilePath $this.outputFile
    }

    [void] InitializeInstallerScript() {
        $installerHeader = @"
<#
.SYNOPSIS
    Installs the complete development environment.

.DESCRIPTION
    - Installs programs using Winget, Chocolatey.
    - Restores VS Code extensions.
    - Configures system settings and registry.

.NOTES
    Auto-generated by AI-powered script.
#>

# Ensure script runs as Administrator
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "Please run as Administrator!" -ForegroundColor Red
    exit
}

"@
        $this.WriteToFile($installerHeader)
    }
}

# Class to handle installed programs
class ProgramCollector : SystemDataCollector {
    [void] CollectInstalledPrograms() {
        Log "Collecting installed programs..."
        try {
            $programs = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* |
                        Select-Object DisplayName, DisplayVersion, InstallLocation, Publisher | Sort-Object DisplayName
            $this.WriteToFile("Write-Host `"Installing Programs...`"")
            foreach ($program in $programs) {
                if ($program.DisplayName) {
                    $this.WriteToFile("winget install --id `"$($program.DisplayName)`" -e --silent")
                }
            }
        } catch {
            Log "Error collecting installed programs: $_"
        }
    }
}

# Class to handle package managers (Chocolatey, Winget, Pip, NPM)
class PackageManagerCollector : SystemDataCollector {
    [void] CollectChocoPackages() {
        if (Get-Command choco -ErrorAction SilentlyContinue) {
            Log "Collecting Chocolatey packages..."
            $packages = choco list --local-only
            foreach ($pkg in $packages) {
                if ($pkg -match "^(\S+)\s(\d+\.\d+)") {
                    $this.WriteToFile("choco install $($matches[1]) -y")
                }
            }
        } else {
            Log "Chocolatey not installed."
        }
    }

    [void] CollectWingetPackages() {
        if (Get-Command winget -ErrorAction SilentlyContinue) {
            Log "Collecting Winget packages..."
            $packages = winget list
            foreach ($pkg in $packages) {
                if ($pkg -match "(.+?)\s+(\d+\.\d+)") {
                    $this.WriteToFile("winget install --id `"$($matches[1])`" -e --silent")
                }
            }
        } else {
            Log "Winget not installed."
        }
    }
}

# Class to handle development environment tools
class DevToolsCollector : SystemDataCollector {
    [void] CollectVSCodeExtensions() {
        if (Get-Command code -ErrorAction SilentlyContinue) {
            Log "Collecting VS Code extensions..."
            $extensions = code --list-extensions
            foreach ($ext in $extensions) {
                $this.WriteToFile("code --install-extension $ext")
            }
        } else {
            Log "VS Code not installed."
        }
    }

    [void] CollectPythonPackages() {
        if (Get-Command pip -ErrorAction SilentlyContinue) {
            Log "Collecting Python packages..."
            $packages = pip list
            foreach ($pkg in $packages) {
                if ($pkg -match "^(\S+)\s(\d+\.\d+)") {
                    $this.WriteToFile("pip install $($matches[1])")
                }
            }
        } else {
            Log "Python not installed."
        }
    }

    [void] CollectNpmPackages() {
        if (Get-Command npm -ErrorAction SilentlyContinue) {
            Log "Collecting global npm packages..."
            $packages = npm list -g --depth=0
            foreach ($pkg in $packages) {
                if ($pkg -match "^(\S+)@(\d+\.\d+)") {
                    $this.WriteToFile("npm install -g $($matches[1])")
                }
            }
        } else {
            Log "NPM not installed."
        }
    }
}

# Class to handle environment variables and registry settings
class ConfigBackup : SystemDataCollector {
    [void] BackupEnvironmentVariables() {
        Log "Backing up environment variables..."
        $vars = Get-ChildItem Env: | ForEach-Object { "$($_.Name)=$($_.Value)" }
        $vars | Out-File -FilePath "$HOME\Desktop\EnvBackup.txt"
    }

    [void] BackupRegistryKeys() {
        Log "Backing up registry settings..."
        reg export HKCU\Software "$HOME\Desktop\RegistryBackup.reg" /y
    }
}

# Run all collectors
$installer = [SystemDataCollector]::new()
$installer.InitializeInstallerScript()

$programCollector = [ProgramCollector]::new()
$programCollector.CollectInstalledPrograms()

$pkgManager = [PackageManagerCollector]::new()
$pkgManager.CollectChocoPackages()
$pkgManager.CollectWingetPackages()

$devTools = [DevToolsCollector]::new()
$devTools.CollectVSCodeExtensions()
$devTools.CollectPythonPackages()
$devTools.CollectNpmPackages()

$configBackup = [ConfigBackup]::new()
$configBackup.BackupEnvironmentVariables()
$configBackup.BackupRegistryKeys()

Log "âœ… Script generation complete. Check `install_dev_env.ps1` on Desktop."
